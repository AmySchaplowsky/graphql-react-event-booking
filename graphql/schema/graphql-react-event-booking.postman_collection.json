{
	"info": {
		"_postman_id": "e67a875a-3e77-45ea-b41a-63ef5ce7f8dc",
		"name": "graphql-react-event-booking",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Bookings",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "396b83a9-967d-412d-846d-e5caa8ca8f2a",
						"exec": [
							"var jsonBody = pm.response.json();",
							"",
							"if (jsonBody) {",
							"    if (jsonBody.data) {",
							"        if (jsonBody.data.login) {",
							"            if (jsonBody.data.login.token) {",
							"                pm.environment.set(\"auth-token\", jsonBody.data.login.token);  ",
							"            } ",
							"        }",
							"    }",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth-token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "{\n    bookings {\n        _id\n        user {\n            _id\n            email\n        }\n        event {\n            _id\n            title\n            description\n            price\n            date\n        }\n        createdAt\n        updatedAt\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:3000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Book Event",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "396b83a9-967d-412d-846d-e5caa8ca8f2a",
						"exec": [
							"var jsonBody = pm.response.json();",
							"",
							"if (jsonBody) {",
							"    if (jsonBody.data) {",
							"        if (jsonBody.data.login) {",
							"            if (jsonBody.data.login.token) {",
							"                pm.environment.set(\"auth-token\", jsonBody.data.login.token);  ",
							"            } ",
							"        }",
							"    }",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth-token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation BookEvent($eventId: ID!) {\n    bookEvent(eventId: $eventId) {\n        _id\n        user {\n            _id\n            email\n        }\n        event {\n            _id\n            title\n            description\n            price\n            date\n        }\n        createdAt\n        updatedAt\n    }\n}",
						"variables": "{\n\t\"eventId\": \"5e8f454ae17fa644b0df237a\"\n}"
					}
				},
				"url": {
					"raw": "http://localhost:3000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Cancel Booking",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "396b83a9-967d-412d-846d-e5caa8ca8f2a",
						"exec": [
							"var jsonBody = pm.response.json();",
							"",
							"if (jsonBody) {",
							"    if (jsonBody.data) {",
							"        if (jsonBody.data.login) {",
							"            if (jsonBody.data.login.token) {",
							"                pm.environment.set(\"auth-token\", jsonBody.data.login.token);  ",
							"            } ",
							"        }",
							"    }",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth-token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation CancelBooking($bookingId: ID!) {\n    cancelBooking(bookingId: $bookingId) {\n        _id\n        title\n        description\n        price\n        date\n        creator {\n            _id\n            email\n        }\n    }\n}",
						"variables": "{\n\t\"bookingId\": \"5e8f4cc76d0c4814589b0fac\"\n}"
					}
				},
				"url": {
					"raw": "http://localhost:3000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Events",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "396b83a9-967d-412d-846d-e5caa8ca8f2a",
						"exec": [
							"var jsonBody = pm.response.json();",
							"",
							"if (jsonBody) {",
							"    if (jsonBody.data) {",
							"        if (jsonBody.data.login) {",
							"            if (jsonBody.data.login.token) {",
							"                pm.environment.set(\"auth-token\", jsonBody.data.login.token);  ",
							"            } ",
							"        }",
							"    }",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "{\n    events {\n        _id\n        title\n        description\n        price\n        date\n        creator {\n            _id\n            email\n            createdEvents {\n                _id\n                title\n            }\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "http://localhost:3000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Event",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "396b83a9-967d-412d-846d-e5caa8ca8f2a",
						"exec": [
							"var jsonBody = pm.response.json();",
							"",
							"if (jsonBody) {",
							"    if (jsonBody.data) {",
							"        if (jsonBody.data.login) {",
							"            if (jsonBody.data.login.token) {",
							"                pm.environment.set(\"auth-token\", jsonBody.data.login.token);  ",
							"            } ",
							"        }",
							"    }",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth-token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation CreateEvent($title: String!, $description: String!, $price: Float!, $date: String!) {\n    createEvent(eventInput: {title: $title, description: $description, price: $price, date: $date}) {\n        _id\n        title\n        description\n        price\n        creator {\n            _id\n            email\n            createdEvents {\n                _id\n                title\n            }\n        }\n    }\n}",
						"variables": "{\n\t\"title\": \"An Event\",\n\t\"description\": \"A descript of this event\",\n\t\"price\": 199.99,\n\t\"date\": \"2020-04-08T20:28:46.432Z\"\n}"
					}
				},
				"url": {
					"raw": "http://localhost:3000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "396b83a9-967d-412d-846d-e5caa8ca8f2a",
						"exec": [
							"var jsonBody = pm.response.json();",
							"",
							"if (jsonBody) {",
							"    if (jsonBody.data) {",
							"        if (jsonBody.data.login) {",
							"            if (jsonBody.data.login.token) {",
							"                pm.environment.set(\"auth-token\", jsonBody.data.login.token);  ",
							"            } ",
							"        }",
							"    }",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{auth-token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation CreateUser($email: String!, $password: String!) {\n    createUser(userInput: { email: $email, password: $password }) {\n        _id\n        email\n        password\n    }\n}",
						"variables": "{\n\t\"email\": \"admin@fr.com\",\n\t\"password\": \"password\"\n}"
					}
				},
				"url": {
					"raw": "http://localhost:3000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "396b83a9-967d-412d-846d-e5caa8ca8f2a",
						"exec": [
							"var jsonBody = pm.response.json();",
							"",
							"if (jsonBody) {",
							"    if (jsonBody.data) {",
							"        if (jsonBody.data.login) {",
							"            if (jsonBody.data.login.token) {",
							"                pm.environment.set(\"auth-token\", jsonBody.data.login.token);  ",
							"            } ",
							"        }",
							"    }",
							"}",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query Login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n        userId\n        token\n        tokenExpiration\n    }\n}\n",
						"variables": "{\n\t\"email\": \"amy.schaplowsky@gmail.com\",\n\t\"password\": \"Today123!\"\n}"
					}
				},
				"url": {
					"raw": "http://localhost:3000/graphql",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"graphql"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}